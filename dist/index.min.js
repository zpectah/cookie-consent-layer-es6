(()=>{var e={2545:(e,t,o)=>{var s=o(1822)(o(7400),"DataView");e.exports=s},6586:(e,t,o)=>{var s=o(7753),n=o(2452),r=o(2115),i=o(8256),a=o(7426);function c(e){var t=-1,o=null==e?0:e.length;for(this.clear();++t<o;){var s=e[t];this.set(s[0],s[1])}}c.prototype.clear=s,c.prototype.delete=n,c.prototype.get=r,c.prototype.has=i,c.prototype.set=a,e.exports=c},6301:(e,t,o)=>{var s=o(9417),n=o(2470),r=o(6165),i=o(1873),a=o(2556);function c(e){var t=-1,o=null==e?0:e.length;for(this.clear();++t<o;){var s=e[t];this.set(s[0],s[1])}}c.prototype.clear=s,c.prototype.delete=n,c.prototype.get=r,c.prototype.has=i,c.prototype.set=a,e.exports=c},4538:(e,t,o)=>{var s=o(1822)(o(7400),"Map");e.exports=s},4554:(e,t,o)=>{var s=o(9448),n=o(7738),r=o(6575),i=o(7238),a=o(8738);function c(e){var t=-1,o=null==e?0:e.length;for(this.clear();++t<o;){var s=e[t];this.set(s[0],s[1])}}c.prototype.clear=s,c.prototype.delete=n,c.prototype.get=r,c.prototype.has=i,c.prototype.set=a,e.exports=c},4825:(e,t,o)=>{var s=o(1822)(o(7400),"Promise");e.exports=s},6151:(e,t,o)=>{var s=o(1822)(o(7400),"Set");e.exports=s},3694:(e,t,o)=>{var s=o(6301),n=o(7354),r=o(5863),i=o(2367),a=o(748),c=o(7569);function l(e){var t=this.__data__=new s(e);this.size=t.size}l.prototype.clear=n,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=a,l.prototype.set=c,e.exports=l},6539:(e,t,o)=>{var s=o(7400).Symbol;e.exports=s},9942:(e,t,o)=>{var s=o(7400).Uint8Array;e.exports=s},6902:(e,t,o)=>{var s=o(1822)(o(7400),"WeakMap");e.exports=s},9349:e=>{e.exports=function(e,t,o){switch(o.length){case 0:return e.call(t);case 1:return e.call(t,o[0]);case 2:return e.call(t,o[0],o[1]);case 3:return e.call(t,o[0],o[1],o[2])}return e.apply(t,o)}},594:e=>{e.exports=function(e,t){for(var o=-1,s=null==e?0:e.length;++o<s&&!1!==t(e[o],o,e););return e}},263:e=>{e.exports=function(e,t){for(var o=-1,s=null==e?0:e.length,n=0,r=[];++o<s;){var i=e[o];t(i,o,e)&&(r[n++]=i)}return r}},8213:(e,t,o)=>{var s=o(4701),n=o(2900),r=o(9785),i=o(3854),a=o(2383),c=o(8519),l=Object.prototype.hasOwnProperty;e.exports=function(e,t){var o=r(e),d=!o&&n(e),p=!o&&!d&&i(e),h=!o&&!d&&!p&&c(e),u=o||d||p||h,g=u?s(e.length,String):[],b=g.length;for(var y in e)!t&&!l.call(e,y)||u&&("length"==y||p&&("offset"==y||"parent"==y)||h&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||a(y,b))||g.push(y);return g}},7141:e=>{e.exports=function(e,t){for(var o=-1,s=t.length,n=e.length;++o<s;)e[n+o]=t[o];return e}},3140:(e,t,o)=>{var s=o(8799),n=o(5638);e.exports=function(e,t,o){(void 0!==o&&!n(e[t],o)||void 0===o&&!(t in e))&&s(e,t,o)}},1928:(e,t,o)=>{var s=o(8799),n=o(5638),r=Object.prototype.hasOwnProperty;e.exports=function(e,t,o){var i=e[t];r.call(e,t)&&n(i,o)&&(void 0!==o||t in e)||s(e,t,o)}},3382:(e,t,o)=>{var s=o(5638);e.exports=function(e,t){for(var o=e.length;o--;)if(s(e[o][0],t))return o;return-1}},1876:(e,t,o)=>{var s=o(5159),n=o(98);e.exports=function(e,t){return e&&s(t,n(t),e)}},5947:(e,t,o)=>{var s=o(5159),n=o(3893);e.exports=function(e,t){return e&&s(t,n(t),e)}},8799:(e,t,o)=>{var s=o(2630);e.exports=function(e,t,o){"__proto__"==t&&s?s(e,t,{configurable:!0,enumerable:!0,value:o,writable:!0}):e[t]=o}},699:(e,t,o)=>{var s=o(3694),n=o(594),r=o(1928),i=o(1876),a=o(5947),c=o(2734),l=o(7561),d=o(1102),p=o(7048),h=o(1385),u=o(9759),g=o(3533),b=o(6541),y=o(2078),f=o(7635),v=o(9785),m=o(3854),C=o(8247),_=o(1611),x=o(7614),k=o(98),A=o(3893),w="[object Arguments]",E="[object Function]",T="[object Object]",$={};$[w]=$["[object Array]"]=$["[object ArrayBuffer]"]=$["[object DataView]"]=$["[object Boolean]"]=$["[object Date]"]=$["[object Float32Array]"]=$["[object Float64Array]"]=$["[object Int8Array]"]=$["[object Int16Array]"]=$["[object Int32Array]"]=$["[object Map]"]=$["[object Number]"]=$[T]=$["[object RegExp]"]=$["[object Set]"]=$["[object String]"]=$["[object Symbol]"]=$["[object Uint8Array]"]=$["[object Uint8ClampedArray]"]=$["[object Uint16Array]"]=$["[object Uint32Array]"]=!0,$["[object Error]"]=$[E]=$["[object WeakMap]"]=!1,e.exports=function e(t,o,j,L,N,O){var S,D=1&o,B=2&o,P=4&o;if(j&&(S=N?j(t,L,N,O):j(t)),void 0!==S)return S;if(!_(t))return t;var I=v(t);if(I){if(S=b(t),!D)return l(t,S)}else{var R=g(t),M=R==E||"[object GeneratorFunction]"==R;if(m(t))return c(t,D);if(R==T||R==w||M&&!N){if(S=B||M?{}:f(t),!D)return B?p(t,a(S,t)):d(t,i(S,t))}else{if(!$[R])return N?t:{};S=y(t,R,D)}}O||(O=new s);var z=O.get(t);if(z)return z;O.set(t,S),x(t)?t.forEach((function(s){S.add(e(s,o,j,s,t,O))})):C(t)&&t.forEach((function(s,n){S.set(n,e(s,o,j,n,t,O))}));var G=I?void 0:(P?B?u:h:B?A:k)(t);return n(G||t,(function(s,n){G&&(s=t[n=s]),r(S,n,e(s,o,j,n,t,O))})),S}},158:(e,t,o)=>{var s=o(1611),n=Object.create,r=function(){function e(){}return function(t){if(!s(t))return{};if(n)return n(t);e.prototype=t;var o=new e;return e.prototype=void 0,o}}();e.exports=r},5372:e=>{e.exports=function(e,t,o,s){for(var n=e.length,r=o+(s?1:-1);s?r--:++r<n;)if(t(e[r],r,e))return r;return-1}},9819:(e,t,o)=>{var s=o(8911)();e.exports=s},1324:(e,t,o)=>{var s=o(7141),n=o(9785);e.exports=function(e,t,o){var r=t(e);return n(e)?r:s(r,o(e))}},9736:(e,t,o)=>{var s=o(6539),n=o(4840),r=o(1258),i=s?s.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?n(e):r(e)}},8817:(e,t,o)=>{var s=o(5372),n=o(1129),r=o(8263);e.exports=function(e,t,o){return t==t?r(e,t,o):s(e,n,o)}},5829:(e,t,o)=>{var s=o(9736),n=o(2360);e.exports=function(e){return n(e)&&"[object Arguments]"==s(e)}},7657:(e,t,o)=>{var s=o(3533),n=o(2360);e.exports=function(e){return n(e)&&"[object Map]"==s(e)}},1129:e=>{e.exports=function(e){return e!=e}},6729:(e,t,o)=>{var s=o(8338),n=o(9678),r=o(1611),i=o(6532),a=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,d=c.toString,p=l.hasOwnProperty,h=RegExp("^"+d.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!r(e)||n(e))&&(s(e)?h:a).test(i(e))}},6903:(e,t,o)=>{var s=o(3533),n=o(2360);e.exports=function(e){return n(e)&&"[object Set]"==s(e)}},6972:(e,t,o)=>{var s=o(9736),n=o(4194),r=o(2360),i={};i["[object Float32Array]"]=i["[object Float64Array]"]=i["[object Int8Array]"]=i["[object Int16Array]"]=i["[object Int32Array]"]=i["[object Uint8Array]"]=i["[object Uint8ClampedArray]"]=i["[object Uint16Array]"]=i["[object Uint32Array]"]=!0,i["[object Arguments]"]=i["[object Array]"]=i["[object ArrayBuffer]"]=i["[object Boolean]"]=i["[object DataView]"]=i["[object Date]"]=i["[object Error]"]=i["[object Function]"]=i["[object Map]"]=i["[object Number]"]=i["[object Object]"]=i["[object RegExp]"]=i["[object Set]"]=i["[object String]"]=i["[object WeakMap]"]=!1,e.exports=function(e){return r(e)&&n(e.length)&&!!i[s(e)]}},186:(e,t,o)=>{var s=o(6016),n=o(962),r=Object.prototype.hasOwnProperty;e.exports=function(e){if(!s(e))return n(e);var t=[];for(var o in Object(e))r.call(e,o)&&"constructor"!=o&&t.push(o);return t}},9464:(e,t,o)=>{var s=o(1611),n=o(6016),r=o(1586),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!s(e))return r(e);var t=n(e),o=[];for(var a in e)("constructor"!=a||!t&&i.call(e,a))&&o.push(a);return o}},15:(e,t,o)=>{var s=o(3694),n=o(3140),r=o(9819),i=o(8867),a=o(1611),c=o(3893),l=o(7494);e.exports=function e(t,o,d,p,h){t!==o&&r(o,(function(r,c){if(h||(h=new s),a(r))i(t,o,c,d,e,p,h);else{var u=p?p(l(t,c),r,c+"",t,o,h):void 0;void 0===u&&(u=r),n(t,c,u)}}),c)}},8867:(e,t,o)=>{var s=o(3140),n=o(2734),r=o(3428),i=o(7561),a=o(7635),c=o(2900),l=o(9785),d=o(6468),p=o(3854),h=o(8338),u=o(1611),g=o(861),b=o(8519),y=o(7494),f=o(9328);e.exports=function(e,t,o,v,m,C,_){var x=y(e,o),k=y(t,o),A=_.get(k);if(A)s(e,o,A);else{var w=C?C(x,k,o+"",e,t,_):void 0,E=void 0===w;if(E){var T=l(k),$=!T&&p(k),j=!T&&!$&&b(k);w=k,T||$||j?l(x)?w=x:d(x)?w=i(x):$?(E=!1,w=n(k,!0)):j?(E=!1,w=r(k,!0)):w=[]:g(k)||c(k)?(w=x,c(x)?w=f(x):u(x)&&!h(x)||(w=a(k))):E=!1}E&&(_.set(k,w),m(w,k,v,C,_),_.delete(k)),s(e,o,w)}}},1197:(e,t,o)=>{var s=o(1137),n=o(1871),r=o(3132);e.exports=function(e,t){return r(n(e,t,s),e+"")}},4459:(e,t,o)=>{var s=o(551),n=o(2630),r=o(1137),i=n?function(e,t){return n(e,"toString",{configurable:!0,enumerable:!1,value:s(t),writable:!0})}:r;e.exports=i},4701:e=>{e.exports=function(e,t){for(var o=-1,s=Array(e);++o<e;)s[o]=t(o);return s}},4833:(e,t,o)=>{var s=o(6127),n=/^\s+/;e.exports=function(e){return e?e.slice(0,s(e)+1).replace(n,""):e}},9334:e=>{e.exports=function(e){return function(t){return e(t)}}},5825:(e,t,o)=>{var s=o(9942);e.exports=function(e){var t=new e.constructor(e.byteLength);return new s(t).set(new s(e)),t}},2734:(e,t,o)=>{e=o.nmd(e);var s=o(7400),n=t&&!t.nodeType&&t,r=n&&e&&!e.nodeType&&e,i=r&&r.exports===n?s.Buffer:void 0,a=i?i.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var o=e.length,s=a?a(o):new e.constructor(o);return e.copy(s),s}},1859:(e,t,o)=>{var s=o(5825);e.exports=function(e,t){var o=t?s(e.buffer):e.buffer;return new e.constructor(o,e.byteOffset,e.byteLength)}},9377:e=>{var t=/\w*$/;e.exports=function(e){var o=new e.constructor(e.source,t.exec(e));return o.lastIndex=e.lastIndex,o}},4116:(e,t,o)=>{var s=o(6539),n=s?s.prototype:void 0,r=n?n.valueOf:void 0;e.exports=function(e){return r?Object(r.call(e)):{}}},3428:(e,t,o)=>{var s=o(5825);e.exports=function(e,t){var o=t?s(e.buffer):e.buffer;return new e.constructor(o,e.byteOffset,e.length)}},7561:e=>{e.exports=function(e,t){var o=-1,s=e.length;for(t||(t=Array(s));++o<s;)t[o]=e[o];return t}},5159:(e,t,o)=>{var s=o(1928),n=o(8799);e.exports=function(e,t,o,r){var i=!o;o||(o={});for(var a=-1,c=t.length;++a<c;){var l=t[a],d=r?r(o[l],e[l],l,o,e):void 0;void 0===d&&(d=e[l]),i?n(o,l,d):s(o,l,d)}return o}},1102:(e,t,o)=>{var s=o(5159),n=o(3080);e.exports=function(e,t){return s(e,n(e),t)}},7048:(e,t,o)=>{var s=o(5159),n=o(791);e.exports=function(e,t){return s(e,n(e),t)}},4937:(e,t,o)=>{var s=o(7400)["__core-js_shared__"];e.exports=s},7270:(e,t,o)=>{var s=o(1197),n=o(7535);e.exports=function(e){return s((function(t,o){var s=-1,r=o.length,i=r>1?o[r-1]:void 0,a=r>2?o[2]:void 0;for(i=e.length>3&&"function"==typeof i?(r--,i):void 0,a&&n(o[0],o[1],a)&&(i=r<3?void 0:i,r=1),t=Object(t);++s<r;){var c=o[s];c&&e(t,c,s,i)}return t}))}},8911:e=>{e.exports=function(e){return function(t,o,s){for(var n=-1,r=Object(t),i=s(t),a=i.length;a--;){var c=i[e?a:++n];if(!1===o(r[c],c,r))break}return t}}},2630:(e,t,o)=>{var s=o(1822),n=function(){try{var e=s(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=n},9120:(e,t,o)=>{var s="object"==typeof o.g&&o.g&&o.g.Object===Object&&o.g;e.exports=s},1385:(e,t,o)=>{var s=o(1324),n=o(3080),r=o(98);e.exports=function(e){return s(e,r,n)}},9759:(e,t,o)=>{var s=o(1324),n=o(791),r=o(3893);e.exports=function(e){return s(e,r,n)}},5899:(e,t,o)=>{var s=o(4479);e.exports=function(e,t){var o=e.__data__;return s(t)?o["string"==typeof t?"string":"hash"]:o.map}},1822:(e,t,o)=>{var s=o(6729),n=o(5371);e.exports=function(e,t){var o=n(e,t);return s(o)?o:void 0}},2173:(e,t,o)=>{var s=o(8023)(Object.getPrototypeOf,Object);e.exports=s},4840:(e,t,o)=>{var s=o(6539),n=Object.prototype,r=n.hasOwnProperty,i=n.toString,a=s?s.toStringTag:void 0;e.exports=function(e){var t=r.call(e,a),o=e[a];try{e[a]=void 0;var s=!0}catch(e){}var n=i.call(e);return s&&(t?e[a]=o:delete e[a]),n}},3080:(e,t,o)=>{var s=o(263),n=o(5937),r=Object.prototype.propertyIsEnumerable,i=Object.getOwnPropertySymbols,a=i?function(e){return null==e?[]:(e=Object(e),s(i(e),(function(t){return r.call(e,t)})))}:n;e.exports=a},791:(e,t,o)=>{var s=o(7141),n=o(2173),r=o(3080),i=o(5937),a=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)s(t,r(e)),e=n(e);return t}:i;e.exports=a},3533:(e,t,o)=>{var s=o(2545),n=o(4538),r=o(4825),i=o(6151),a=o(6902),c=o(9736),l=o(6532),d="[object Map]",p="[object Promise]",h="[object Set]",u="[object WeakMap]",g="[object DataView]",b=l(s),y=l(n),f=l(r),v=l(i),m=l(a),C=c;(s&&C(new s(new ArrayBuffer(1)))!=g||n&&C(new n)!=d||r&&C(r.resolve())!=p||i&&C(new i)!=h||a&&C(new a)!=u)&&(C=function(e){var t=c(e),o="[object Object]"==t?e.constructor:void 0,s=o?l(o):"";if(s)switch(s){case b:return g;case y:return d;case f:return p;case v:return h;case m:return u}return t}),e.exports=C},5371:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},7753:(e,t,o)=>{var s=o(5718);e.exports=function(){this.__data__=s?s(null):{},this.size=0}},2452:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},2115:(e,t,o)=>{var s=o(5718),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(s){var o=t[e];return"__lodash_hash_undefined__"===o?void 0:o}return n.call(t,e)?t[e]:void 0}},8256:(e,t,o)=>{var s=o(5718),n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return s?void 0!==t[e]:n.call(t,e)}},7426:(e,t,o)=>{var s=o(5718);e.exports=function(e,t){var o=this.__data__;return this.size+=this.has(e)?0:1,o[e]=s&&void 0===t?"__lodash_hash_undefined__":t,this}},6541:e=>{var t=Object.prototype.hasOwnProperty;e.exports=function(e){var o=e.length,s=new e.constructor(o);return o&&"string"==typeof e[0]&&t.call(e,"index")&&(s.index=e.index,s.input=e.input),s}},2078:(e,t,o)=>{var s=o(5825),n=o(1859),r=o(9377),i=o(4116),a=o(3428);e.exports=function(e,t,o){var c=e.constructor;switch(t){case"[object ArrayBuffer]":return s(e);case"[object Boolean]":case"[object Date]":return new c(+e);case"[object DataView]":return n(e,o);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return a(e,o);case"[object Map]":case"[object Set]":return new c;case"[object Number]":case"[object String]":return new c(e);case"[object RegExp]":return r(e);case"[object Symbol]":return i(e)}}},7635:(e,t,o)=>{var s=o(158),n=o(2173),r=o(6016);e.exports=function(e){return"function"!=typeof e.constructor||r(e)?{}:s(n(e))}},2383:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,o){var s=typeof e;return!!(o=null==o?9007199254740991:o)&&("number"==s||"symbol"!=s&&t.test(e))&&e>-1&&e%1==0&&e<o}},7535:(e,t,o)=>{var s=o(5638),n=o(68),r=o(2383),i=o(1611);e.exports=function(e,t,o){if(!i(o))return!1;var a=typeof t;return!!("number"==a?n(o)&&r(t,o.length):"string"==a&&t in o)&&s(o[t],e)}},4479:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},9678:(e,t,o)=>{var s,n=o(4937),r=(s=/[^.]+$/.exec(n&&n.keys&&n.keys.IE_PROTO||""))?"Symbol(src)_1."+s:"";e.exports=function(e){return!!r&&r in e}},6016:e=>{var t=Object.prototype;e.exports=function(e){var o=e&&e.constructor;return e===("function"==typeof o&&o.prototype||t)}},9417:e=>{e.exports=function(){this.__data__=[],this.size=0}},2470:(e,t,o)=>{var s=o(3382),n=Array.prototype.splice;e.exports=function(e){var t=this.__data__,o=s(t,e);return!(o<0||(o==t.length-1?t.pop():n.call(t,o,1),--this.size,0))}},6165:(e,t,o)=>{var s=o(3382);e.exports=function(e){var t=this.__data__,o=s(t,e);return o<0?void 0:t[o][1]}},1873:(e,t,o)=>{var s=o(3382);e.exports=function(e){return s(this.__data__,e)>-1}},2556:(e,t,o)=>{var s=o(3382);e.exports=function(e,t){var o=this.__data__,n=s(o,e);return n<0?(++this.size,o.push([e,t])):o[n][1]=t,this}},9448:(e,t,o)=>{var s=o(6586),n=o(6301),r=o(4538);e.exports=function(){this.size=0,this.__data__={hash:new s,map:new(r||n),string:new s}}},7738:(e,t,o)=>{var s=o(5899);e.exports=function(e){var t=s(this,e).delete(e);return this.size-=t?1:0,t}},6575:(e,t,o)=>{var s=o(5899);e.exports=function(e){return s(this,e).get(e)}},7238:(e,t,o)=>{var s=o(5899);e.exports=function(e){return s(this,e).has(e)}},8738:(e,t,o)=>{var s=o(5899);e.exports=function(e,t){var o=s(this,e),n=o.size;return o.set(e,t),this.size+=o.size==n?0:1,this}},5718:(e,t,o)=>{var s=o(1822)(Object,"create");e.exports=s},962:(e,t,o)=>{var s=o(8023)(Object.keys,Object);e.exports=s},1586:e=>{e.exports=function(e){var t=[];if(null!=e)for(var o in Object(e))t.push(o);return t}},8125:(e,t,o)=>{e=o.nmd(e);var s=o(9120),n=t&&!t.nodeType&&t,r=n&&e&&!e.nodeType&&e,i=r&&r.exports===n&&s.process,a=function(){try{return r&&r.require&&r.require("util").types||i&&i.binding&&i.binding("util")}catch(e){}}();e.exports=a},1258:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},8023:e=>{e.exports=function(e,t){return function(o){return e(t(o))}}},1871:(e,t,o)=>{var s=o(9349),n=Math.max;e.exports=function(e,t,o){return t=n(void 0===t?e.length-1:t,0),function(){for(var r=arguments,i=-1,a=n(r.length-t,0),c=Array(a);++i<a;)c[i]=r[t+i];i=-1;for(var l=Array(t+1);++i<t;)l[i]=r[i];return l[t]=o(c),s(e,this,l)}}},7400:(e,t,o)=>{var s=o(9120),n="object"==typeof self&&self&&self.Object===Object&&self,r=s||n||Function("return this")();e.exports=r},7494:e=>{e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},3132:(e,t,o)=>{var s=o(4459),n=o(9591)(s);e.exports=n},9591:e=>{var t=Date.now;e.exports=function(e){var o=0,s=0;return function(){var n=t(),r=16-(n-s);if(s=n,r>0){if(++o>=800)return arguments[0]}else o=0;return e.apply(void 0,arguments)}}},7354:(e,t,o)=>{var s=o(6301);e.exports=function(){this.__data__=new s,this.size=0}},5863:e=>{e.exports=function(e){var t=this.__data__,o=t.delete(e);return this.size=t.size,o}},2367:e=>{e.exports=function(e){return this.__data__.get(e)}},748:e=>{e.exports=function(e){return this.__data__.has(e)}},7569:(e,t,o)=>{var s=o(6301),n=o(4538),r=o(4554);e.exports=function(e,t){var o=this.__data__;if(o instanceof s){var i=o.__data__;if(!n||i.length<199)return i.push([e,t]),this.size=++o.size,this;o=this.__data__=new r(i)}return o.set(e,t),this.size=o.size,this}},8263:e=>{e.exports=function(e,t,o){for(var s=o-1,n=e.length;++s<n;)if(e[s]===t)return s;return-1}},6532:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},6127:e=>{var t=/\s/;e.exports=function(e){for(var o=e.length;o--&&t.test(e.charAt(o)););return o}},454:(e,t,o)=>{var s=o(699);e.exports=function(e){return s(e,5)}},551:e=>{e.exports=function(e){return function(){return e}}},5638:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},1137:e=>{e.exports=function(e){return e}},7948:(e,t,o)=>{var s=o(8817),n=o(7991),r=Math.max;e.exports=function(e,t,o){var i=null==e?0:e.length;if(!i)return-1;var a=null==o?0:n(o);return a<0&&(a=r(i+a,0)),s(e,t,a)}},2900:(e,t,o)=>{var s=o(5829),n=o(2360),r=Object.prototype,i=r.hasOwnProperty,a=r.propertyIsEnumerable,c=s(function(){return arguments}())?s:function(e){return n(e)&&i.call(e,"callee")&&!a.call(e,"callee")};e.exports=c},9785:e=>{var t=Array.isArray;e.exports=t},68:(e,t,o)=>{var s=o(8338),n=o(4194);e.exports=function(e){return null!=e&&n(e.length)&&!s(e)}},6468:(e,t,o)=>{var s=o(68),n=o(2360);e.exports=function(e){return n(e)&&s(e)}},3854:(e,t,o)=>{e=o.nmd(e);var s=o(7400),n=o(7714),r=t&&!t.nodeType&&t,i=r&&e&&!e.nodeType&&e,a=i&&i.exports===r?s.Buffer:void 0,c=(a?a.isBuffer:void 0)||n;e.exports=c},8338:(e,t,o)=>{var s=o(9736),n=o(1611);e.exports=function(e){if(!n(e))return!1;var t=s(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},4194:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},8247:(e,t,o)=>{var s=o(7657),n=o(9334),r=o(8125),i=r&&r.isMap,a=i?n(i):s;e.exports=a},1611:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},2360:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},861:(e,t,o)=>{var s=o(9736),n=o(2173),r=o(2360),i=Function.prototype,a=Object.prototype,c=i.toString,l=a.hasOwnProperty,d=c.call(Object);e.exports=function(e){if(!r(e)||"[object Object]"!=s(e))return!1;var t=n(e);if(null===t)return!0;var o=l.call(t,"constructor")&&t.constructor;return"function"==typeof o&&o instanceof o&&c.call(o)==d}},7614:(e,t,o)=>{var s=o(6903),n=o(9334),r=o(8125),i=r&&r.isSet,a=i?n(i):s;e.exports=a},5193:(e,t,o)=>{var s=o(9736),n=o(2360);e.exports=function(e){return"symbol"==typeof e||n(e)&&"[object Symbol]"==s(e)}},8519:(e,t,o)=>{var s=o(6972),n=o(9334),r=o(8125),i=r&&r.isTypedArray,a=i?n(i):s;e.exports=a},98:(e,t,o)=>{var s=o(8213),n=o(186),r=o(68);e.exports=function(e){return r(e)?s(e):n(e)}},3893:(e,t,o)=>{var s=o(8213),n=o(9464),r=o(68);e.exports=function(e){return r(e)?s(e,!0):n(e)}},5409:(e,t,o)=>{var s=o(15),n=o(7270)((function(e,t,o){s(e,t,o)}));e.exports=n},5937:e=>{e.exports=function(){return[]}},7714:e=>{e.exports=function(){return!1}},4919:(e,t,o)=>{var s=o(1936);e.exports=function(e){return e?Infinity===(e=s(e))||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},7991:(e,t,o)=>{var s=o(4919);e.exports=function(e){var t=s(e),o=t%1;return t==t?o?t-o:t:0}},1936:(e,t,o)=>{var s=o(4833),n=o(1611),r=o(5193),i=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,c=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(r(e))return NaN;if(n(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=n(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=s(e);var o=a.test(e);return o||c.test(e)?l(e.slice(2),o?2:8):i.test(e)?NaN:+e}},9328:(e,t,o)=>{var s=o(5159),n=o(3893);e.exports=function(e){return s(e,n(e))}},5816:()=>{},9776:function(e,t,o){"use strict";var s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=s(o(454)),r=s(o(5409)),i=s(o(7948)),a=o(3337),c=o(3375),l=o(9834);t.default=class{constructor(e,t,o){this.tokens={BTN_ACCEPT_ALL_CCL:"button_acceptAll",BTN_ACCEPT_NECESSARY_CCL:"button_acceptNecessary",BTN_SAVE_CCL:"button_save",REVISION_ALERT_CCL:"revision_alert",BTN_SHOW_DIALOG_CCL:"show_dialog",BTN_HIDE_DIALOG_CCL:"hide_dialog",BTN_SHOW_BANNER_CCL:"show_banner",BTN_HIDE_BANNER_CCL:"hide_banner",CATEGORIES_TABLE_CCL:"categories_table",CATEGORY_TOGGLE_PFX_CCL:"category_",DATA_CCL:"data-ccl",DATA_CCL_TARGET:"data-ccl-target",DATA_CCL_TOGGLE:"data-ccl-toggle",DATA_CCL_CATEGORY:"data-ccl-category"},this.banner={init:()=>{this.state.dialog.destroyed?this.err("banner","Banner has been removed from DOM, try reload page"):(this.renderBannerElement(),this.state.banner.render=!0)},show:(e=0)=>{const t=document.getElementById(this.options.banner.id),o=()=>{t&&(t.style.display="block",t.ariaHidden="false",this.state.banner.show=!0)};e>0?setTimeout(o,e):o()},hide:()=>{const e=document.getElementById(this.options.banner.id);e&&(e.style.display="none",e.ariaHidden="true",this.state.banner.show=!1)},destroy:()=>{const e=document.getElementById(this.options.banner.id);e&&(e.remove(),this.state.banner.render=!1,this.state.banner.show=!1,this.state.banner.destroyed=!0)}},this.dialog={init:()=>{this.state.dialog.destroyed?this.err("dialog","Dialog has been removed from DOM, try reload page"):(this.renderDialogElement(),this.state.dialog.render=!0)},show:(e=0)=>{const t=document.getElementById(this.options.dialog.id),o=()=>{t&&(t.style.display="block",t.ariaHidden="false",this.state.dialog.show=!0)};e>0?setTimeout(o,e):o()},hide:()=>{const e=document.getElementById(this.options.dialog.id);e&&(e.style.display="none",e.ariaHidden="true",this.state.categories.dirty=!1,this.state.dialog.show=!1)},destroy:()=>{const e=document.getElementById(this.options.dialog.id);e&&(e.remove(),this.state.categories.dirty=!1,this.state.categories.show=!1,this.state.categories.table=!1,this.state.dialog.render=!1,this.state.dialog.show=!1,this.state.dialog.destroyed=!0)}},this.layout={bannerBody:(e,t,o)=>{const s=`<div class="${this.selectors.banner.bodyTitleClassName}">${e}</div>`,n=`<div class="${this.selectors.banner.bodyContentClassName}">${t}</div>`;return`${s}${o&&`<div id="${this.tokens.REVISION_ALERT_CCL}" class="${this.selectors.banner.bodyRevisionClassName}">${o}</div>`}${n}`},dialogBody:(e,t,o,s)=>{const n=`<button type="button" ${this.tokens.DATA_CCL}="${this.tokens.BTN_HIDE_DIALOG_CCL}" class="${this.selectors.dialog.bodyCloseClassName}" title='${s}'>X</button>`,r=`<h3 class="${this.selectors.dialog.bodyTitleClassName}">${e}</h3>`,i=`<div class="${this.selectors.dialog.bodyPrimaryClassName}">${t}</div>`,a=o&&`<div class="${this.selectors.dialog.bodySecondaryClassName}">${o}</div>`;return`${n}${r}${i}<div ${this.tokens.DATA_CCL_TARGET}="${this.tokens.CATEGORIES_TABLE_CCL}" class="${this.selectors.dialog.bodyTableClassName}">Loading table, please wait</div>${a}`},categoryBody:()=>{},tableBody:()=>{}},this.cookies={get:(e=this.options.cookie.name)=>{const t=(0,a.getCookie)(e);return t&&(this.options.cookie.rfc?JSON.parse(decodeURIComponent(t)):JSON.parse(t))},getData:()=>{const e=this.cookies.get(),t=new Date,o=e&&e.dateUpdated;return console.log("compare two dates, if date is expired ... (updated + expiration) >= today ... ",t.toISOString(),o),{current:e,createdDate:o||t.toISOString(),updatedDate:t.toISOString(),isExpiredDate:!1,isExpiredRevision:!!e&&e.revision!==this.options.meta.revision}},set:(e,t=this.options.cookie.name,o=this.options.cookie.expiration)=>{const s=this.options.cookie.rfc?encodeURIComponent(JSON.stringify(e)):JSON.stringify(e);(0,a.setCookie)(t,s,o)},destroy:(e=this.options.cookie.name)=>(0,a.setCookie)("",e,-1)},this.consent={addCookie:(e,t)=>{this.options.consent.cookies[e]=[...this.options.consent.cookies[e],...t],this.renderCategoryTable(),t.length>0&&this.log(`## Consent cookie table '${e}' was updated`,this.options.consent.cookies[e])},removeCookie:(e,t)=>{const o=[...this.options.consent.cookies[e]];t.map((e=>{const t=o.find((t=>t.name===e)),s=(0,i.default)(o,t);s>-1&&o.splice(s,1)})),this.options.consent.cookies[e]=o,this.renderCategoryTable(),t.length>0&&this.log(`## Consent cookie table '${e}' was updated`,this.options.consent.cookies[e])}},this.state=(0,n.default)(c.DEFAULT_STATE),this.options=(0,r.default)(c.DEFAULT_OPTIONS,e),this.scope=t||"default",this.uuid=o||(0,a.getToken)(6),this.selectors={btn:{acceptAllClassName:`${this.options.meta.classPrefix}button ${this.options.meta.classPrefix}button--primary`,acceptNecessaryClassName:`${this.options.meta.classPrefix}button ${this.options.meta.classPrefix}button--secondary`,saveChangesClassName:`${this.options.meta.classPrefix}button ${this.options.meta.classPrefix}button--secondary`},banner:{wrapperId:this.options.banner.id,wrapperClassName:`${this.options.meta.classPrefix}banner-wrapper`,bodyId:`${this.options.banner.id}_body`,bodyClassName:`${this.options.meta.classPrefix}banner-body`,bodyTitleClassName:`${this.options.meta.classPrefix}banner-body-title`,bodyRevisionClassName:`${this.options.meta.classPrefix}banner-body-revision`,bodyContentClassName:`${this.options.meta.classPrefix}banner-body-content`,actionsId:`${this.options.banner.id}_actions`,actionsClassName:`${this.options.meta.classPrefix}banner-actions`},dialog:{wrapperId:this.options.dialog.id,wrapperClassName:`${this.options.meta.classPrefix}dialog-wrapper`,bodyId:`${this.options.dialog.id}_body`,bodyClassName:`${this.options.meta.classPrefix}dialog-body`,bodyCloseClassName:`${this.options.meta.classPrefix}dialog-body-close`,bodyTitleClassName:`${this.options.meta.classPrefix}dialog-body-title`,bodyTableClassName:`${this.options.meta.classPrefix}dialog-body-table`,bodyPrimaryClassName:`${this.options.meta.classPrefix}dialog-body-primary`,bodySecondaryClassName:`${this.options.meta.classPrefix}dialog-body-secondary`,actionsId:`${this.options.dialog.id}_actions`,actionsClassName:`${this.options.meta.classPrefix}dialog-actions`},categoryRows:{categoryRowClassName:`${this.options.meta.classPrefix}category-row`,categoryOuterClassName:`${this.options.meta.classPrefix}category-outer`,categoryRowInnerClassName:`${this.options.meta.classPrefix}category-row-inner`,categoryTableClassName:`${this.options.meta.classPrefix}category-table`,toggleIdPrefix:`${this.uuid}_toggle_`,toggleClassName:`${this.options.meta.classPrefix}category-toggle`,toggleLabelClassName:`${this.options.meta.classPrefix}category-toggle-label`,toggleInputClassName:`${this.options.meta.classPrefix}category-toggle-input`,block:`${this.options.meta.classPrefix}category-block`,blockHeading:`${this.options.meta.classPrefix}category-block-heading`,blockHeadingToggle:`${this.options.meta.classPrefix}category-block-heading-toggle`,blockTable:`${this.options.meta.classPrefix}category-block-table`,blockCollapsible:`${this.options.meta.classPrefix}category-block-collapsible`,blockHeadingTitle:`${this.options.meta.classPrefix}category-block-heading-title`,blockDescription:`${this.options.meta.classPrefix}category-block-description`},state:{isChecked:"is-checked"}},this.nodes={showDialog:()=>document.querySelectorAll(`[${this.tokens.DATA_CCL}="${this.tokens.BTN_SHOW_DIALOG_CCL}"]`),hideDialog:()=>document.querySelectorAll(`[${this.tokens.DATA_CCL}="${this.tokens.BTN_HIDE_DIALOG_CCL}"]`),showBanner:()=>document.querySelectorAll(`[${this.tokens.DATA_CCL}="${this.tokens.BTN_SHOW_BANNER_CCL}"]`),hideBanner:()=>document.querySelectorAll(`[${this.tokens.DATA_CCL}="${this.tokens.BTN_HIDE_BANNER_CCL}"]`),acceptAll:()=>document.querySelectorAll(`[${this.tokens.DATA_CCL}="${this.tokens.BTN_ACCEPT_ALL_CCL}"]`),acceptNecessary:()=>document.querySelectorAll(`[${this.tokens.DATA_CCL}="${this.tokens.BTN_ACCEPT_NECESSARY_CCL}"]`),saveChanges:()=>document.querySelectorAll(`[${this.tokens.DATA_CCL}="${this.tokens.BTN_SAVE_CCL}"]`)},this.events={showBanner:e=>{e.preventDefault(),this.banner.show()},hideBanner:e=>{e.preventDefault(),this.banner.hide()},showDialog:e=>{e.preventDefault(),this.dialog.show()},hideDialog:e=>{e.preventDefault(),this.dialog.hide()},acceptNecessary:e=>{e.preventDefault(),this.onAcceptNecessaryHandler()},acceptAll:e=>{e.preventDefault(),this.onAcceptAllHandler()},saveChanges:e=>{e.preventDefault(),this.onChangeHandler()},toggleCategory:(e,t)=>{e.preventDefault(),this.categoryToggleHandler(t,e)}},this.init()}_getState(){return this.state}_getPreferences(){return this.state.preferences}_getOptions(){return this.options}_getNodes(){return this.nodes}_getSelectors(){return this.selectors}log(...e){this.options.meta.debug&&console.log(...e)}err(e,t){console.warn(`${e}:${t}`,this.state),this.options.onError&&"function"==typeof this.options.onError&&this.options.onError(e,t,this.state)}historyPush(e){this.state.history.push(e)}browseSiteScripts(){const e=document.querySelectorAll(`[${this.tokens.DATA_CCL_CATEGORY}]`),t=[];e.forEach((e=>{t.push({category:e.dataset.cclCategory,baseURI:e.baseURI,async:e.async,src:e.src}),this.options.scripts.autoload&&e.remove()})),this.state.scripts.site=[...t]}appendSiteScripts(){console.log("append to body these <script> tags",this.state.scripts.site)}scriptsAutoloadController(e,t){this.options.scripts.autoload&&console.log("Trigger: scriptsAutoloadController -> autoload features",e,t)}cookieLoaderController(e,t){this.options.consent.autoClearCookies&&console.log("Trigger: cookieAutoloader() -> autoClearCookies features",e,t)}changeLanguage(e=this.options.language,t=!0){this.state.language=e,t&&this.setLocalesContent(e)}getLocales(e=this.state.language){return this.options.locales[e]}setLocalesContent(e=this.state.language){const t=this.cookies.getData(),o=this.getLocales(e),s=document.getElementById(this.selectors.banner.bodyId),n=document.getElementById(this.selectors.dialog.bodyId);this.nodes.acceptAll().forEach((e=>{e.innerText=`${o.common.buttonAcceptAll}`})),this.nodes.acceptNecessary().forEach((e=>{e.innerText=`${o.common.buttonAcceptNecessary}`})),this.nodes.saveChanges().forEach((e=>{e.innerText=`${o.common.buttonSave}`})),s&&(s.innerHTML=this.layout.bannerBody(o.banner.title,o.banner.content,t.isExpiredRevision?o.revisionAlert:void 0)),n&&(n.innerHTML=this.layout.dialogBody(o.dialog.title,o.dialog.primary,o.dialog.secondary,o.common.buttonClose)),this.renderCategoryTable(),this.log(`Locales has been set with "${e}"`)}getCallbackData(e){const t=this.cookies.getData();let o,s,n;switch(e){case l.preferenceStateEventKeys.custom:o=[...this.state.preferences.accepted],s=[...this.state.preferences.declined],n=[...this.state.preferences.changed];break;case l.preferenceStateEventKeys.all:o=[...this.options.consent.categories],s=[],n=this.state.preferences.accepted.filter((e=>this.options.consent.categories.includes(e)));break;case l.preferenceStateEventKeys.necessary:default:o=[...this.options.consent.necessaryCategories],s=[...this.options.consent.categories.filter((e=>!this.options.consent.necessaryCategories.includes(e)))],n=this.state.preferences.accepted.filter((e=>this.options.consent.necessaryCategories.includes(e)))}return{preferences:{event:e,timestamp:(0,a.getTimestamp)(),accepted:o,declined:s,changed:n},cookie:{categories:o,uuid:this.uuid,revision:this.options.meta.revision,rfc:this.options.cookie.rfc,dateCreated:t.createdDate,dateUpdated:t.updatedDate,data:null}}}eventCallbackHandler(e,t){const o=this.getCallbackData(e),s=o.preferences,n=o.cookie;this.banner.hide(),this.dialog.hide(),this.state.preferences=s,this.state.cookie=n,this.cookies.set(n),this.adjustCategoryToggle(),this.historyPush(e),this.cookieLoaderController(e,o),this.scriptsAutoloadController(e,o),t&&"function"==typeof t&&t(n,s),this.log(`Event callback "${e}" triggered`)}onAcceptAllHandler(){this.eventCallbackHandler(l.preferenceStateEventKeys.all,this.options.onAcceptAll)}onAcceptNecessaryHandler(){this.eventCallbackHandler(l.preferenceStateEventKeys.necessary,this.options.onAcceptNecessary)}onChangeHandler(){this.eventCallbackHandler(l.preferenceStateEventKeys.custom,this.options.onChange)}categoryToggleHandler(e,t){const o=this.options.consent.categories||[],s=this.state.preferences.accepted?(0,n.default)(this.state.preferences.accepted):[];let r,a;const c=(0,i.default)(s,e);if(c>-1?s.splice(c,1):s.push(e),r=o.filter((e=>!s.includes(e))),a=o.filter((e=>s.includes(e))),this.state.preferences.accepted=s,this.state.preferences.declined=r,this.state.preferences.changed=a,this.historyPush(`toggle:${e}`),this.options.onToggle&&"function"==typeof this.options.onToggle&&this.options.onToggle(this.state.preferences),t&&t.target){const o=(0,i.default)(s,e)>-1;t.target.checked=o&&"checked",t.target.classList.toggle(this.selectors.state.isChecked,o)}this.state.categories.dirty=!0,this.log("categoryToggleHandler",s,r,a)}adjustCategoryToggle(){const e=this.options.consent.categories||[],t=this.state.preferences.accepted||[];e.map((e=>{const o=`${this.tokens.CATEGORY_TOGGLE_PFX_CCL}${e}`;document.querySelectorAll(`[${this.tokens.DATA_CCL_TOGGLE}="${o}"]`).forEach((o=>{const s=(0,i.default)(t,e)>-1;o.checked=s&&"checked",o.classList.toggle(this.selectors.state.isChecked,s)}))}))}initButtonDomEvents(){this.nodes.showDialog().forEach((e=>{e.addEventListener("click",this.events.showDialog)})),this.nodes.hideDialog().forEach((e=>{e.addEventListener("click",this.events.hideDialog)})),this.nodes.showBanner().forEach((e=>{e.addEventListener("click",this.events.showBanner)})),this.nodes.hideBanner().forEach((e=>{e.addEventListener("click",this.events.hideBanner)})),this.nodes.acceptAll().forEach((e=>{e.addEventListener("click",this.events.acceptAll)})),this.nodes.acceptNecessary().forEach((e=>{e.addEventListener("click",this.events.acceptNecessary)})),this.nodes.saveChanges().forEach((e=>{e.addEventListener("click",this.events.saveChanges)})),this.log("Button events initiated")}removeButtonDomEvents(){this.nodes.showDialog().forEach((e=>{e.removeEventListener("click",this.events.showDialog)})),this.nodes.hideDialog().forEach((e=>{e.removeEventListener("click",this.events.hideDialog)})),this.nodes.showBanner().forEach((e=>{e.removeEventListener("click",this.events.showBanner)})),this.nodes.hideBanner().forEach((e=>{e.removeEventListener("click",this.events.hideBanner)})),this.nodes.acceptAll().forEach((e=>{e.removeEventListener("click",this.events.acceptAll)})),this.nodes.acceptNecessary().forEach((e=>{e.removeEventListener("click",this.events.acceptNecessary)})),this.nodes.saveChanges().forEach((e=>{e.removeEventListener("click",this.events.saveChanges)})),this.log("Button events destroyed")}initToggleDomEvents(){(this.options.consent.categories||[]).map((e=>{const t=`${this.tokens.CATEGORY_TOGGLE_PFX_CCL}${e}`;document.querySelectorAll(`[${this.tokens.DATA_CCL_TOGGLE}="${t}"]`).forEach((t=>{t.addEventListener("change",(t=>this.events.toggleCategory(t,e)))}))})),this.log("Categories toggle events initiated")}removeToggleDomEvents(){(this.options.consent.categories||[]).map((e=>{const t=`${this.tokens.CATEGORY_TOGGLE_PFX_CCL}${e}`;document.querySelectorAll(`[${this.tokens.DATA_CCL_TOGGLE}="${t}"]`).forEach((t=>{t.removeEventListener("change",(t=>this.events.toggleCategory(t,e)))}))})),this.log("Categories toggle events destroyed")}renderCategoryTable(e=!0){const t=this.getLocales(),o=document.querySelectorAll(`[${this.tokens.DATA_CCL_TARGET}="${this.tokens.CATEGORIES_TABLE_CCL}"]`),s=this.options.consent.categories||[],n=e=>{const t=`${this.selectors.categoryRows.toggleIdPrefix}${e}`,o=(0,i.default)(this.options.consent.necessaryCategories,e)>-1||(0,i.default)(this.options.consent.staticCategories,e)>-1,s=`<input type="checkbox" id="${t}" class="${this.selectors.categoryRows.toggleInputClassName}" value="${e}" ${this.tokens.DATA_CCL_TOGGLE}="${this.tokens.CATEGORY_TOGGLE_PFX_CCL}${e}" ${o?"disabled":""} />`,n=`<label for="${t}" aria-labelledby="${t}" class="${this.selectors.categoryRows.toggleLabelClassName}">${s}</label>`;return`<span class="${this.selectors.categoryRows.toggleClassName}" tabindex="1">${n}</span>`},r=e=>{const o=this.options.consent.cookies[e]||[];let s="<thead><tr>";s+=`<th>${t.table.colName}</th>`,s+=`<th>${t.table.colDomain}</th>`,s+=`<th>${t.table.colExpiration}</th>`,s+=`<th>${t.table.colDescription}</th>`,s+="</tr></thead>";let n="<tbody>";return o.map((e=>{n+="<tr>",n+=`<th>${e.name}</th>`,n+=`<td>${e.domain}</td>`,n+=`<td>${e.expiration}</td>`,n+=`<td>${e.description}</td>`,n+="</tr>"})),n+="</tbody>",`<colgroup><col style="width:auto;" /><col style="width:auto;" /><col style="width:150px;" /><col style="width:auto;" /></colgroup>${s}${n}`},c=o=>{const s=t.categories[o],i=`<h4 class="${this.selectors.categoryRows.blockHeadingTitle}">${s.title?s.title:"undefined"}</h4>`,a=`<div class="${this.selectors.categoryRows.blockDescription}">${s.description?s.description:"undefined"}</div>`,c=`<div class="${this.selectors.categoryRows.blockHeadingToggle}">${n(o)}</div>`,l=`<div class="${this.selectors.categoryRows.blockHeading}">${i}${c}</div>`,d=e&&`<div class="${this.selectors.categoryRows.blockTable}"><table class="${this.selectors.categoryRows.categoryTableClassName}">${r(o)}</table></div>`,p=`<div class="${this.selectors.categoryRows.blockCollapsible}">${a}${d}</div>`;return`<div class="${this.selectors.categoryRows.block}">${l}${p}</div>`},l=(0,a.createElement)({className:this.selectors.categoryRows.categoryOuterClassName});s.map((e=>{const t=(0,a.createElement)({tag:"article",className:this.selectors.categoryRows.categoryRowClassName});t.appendChild((0,a.createElement)({className:this.selectors.categoryRows.categoryRowInnerClassName,html:c(e)})),l.appendChild(t)})),o&&(this.state.categories.show=!0,this.state.categories.table=e,o.forEach((e=>{e.innerHTML="",e.appendChild(l)}))),this.initToggleDomEvents(),this.adjustCategoryToggle()}renderBannerElement(){const e=this.cookies.getData(),t=this.getLocales();let o=`layout--${this.options.banner.layout}`;o+=` position--${this.options.banner.position.replace(/\s/g,"-")}`,o+=` transition--${this.options.banner.transition}`;const s=(0,a.createElement)({id:this.selectors.banner.wrapperId,className:`${this.selectors.banner.wrapperClassName} ${o}`,arias:{hidden:!0}}),n=(0,a.createElement)({id:this.selectors.banner.bodyId,className:this.selectors.banner.bodyClassName,html:this.layout.bannerBody(t.banner.title,t.banner.content,e.isExpiredRevision?t.revisionAlert:void 0)}),r=(0,a.createElement)({id:this.selectors.banner.actionsId,className:this.selectors.banner.actionsClassName}),i=(0,a.createButtonElement)(this.options.banner.btnAcceptAllId,this.selectors.btn.acceptAllClassName,t.common.buttonAcceptAll,this.tokens.BTN_ACCEPT_ALL_CCL),c=(0,a.createButtonElement)(this.options.banner.btnAcceptNecessaryId,this.selectors.btn.acceptNecessaryClassName,t.common.buttonAcceptNecessary,this.tokens.BTN_ACCEPT_NECESSARY_CCL);r.appendChild(i),r.appendChild(c),s.appendChild(n),s.appendChild(r),document.body.appendChild(s)}renderDialogElement(){const e=this.getLocales();let t=`layout--${this.options.dialog.layout}`;t+=` position--${this.options.dialog.position}`,t+=` transition--${this.options.dialog.transition}`;const o=(0,a.createElement)({id:this.selectors.dialog.wrapperId,className:`${this.selectors.dialog.wrapperClassName} ${t}`,arias:{hidden:!0}}),s=(0,a.createElement)({id:this.selectors.dialog.bodyId,className:this.selectors.dialog.bodyClassName,html:this.layout.dialogBody(e.dialog.title,e.dialog.primary,e.dialog.secondary,e.common.buttonClose)}),n=(0,a.createElement)({id:this.selectors.dialog.actionsId,className:this.selectors.dialog.actionsClassName}),r=(0,a.createButtonElement)(this.options.dialog.btnAcceptAllId,this.selectors.btn.acceptAllClassName,e.common.buttonAcceptAll,this.tokens.BTN_ACCEPT_ALL_CCL),i=(0,a.createButtonElement)(this.options.dialog.btnAcceptNecessaryId,this.selectors.btn.acceptNecessaryClassName,e.common.buttonAcceptNecessary,this.tokens.BTN_ACCEPT_NECESSARY_CCL),c=(0,a.createButtonElement)(this.options.dialog.btnSaveId,this.selectors.btn.saveChangesClassName,e.common.buttonSave,this.tokens.BTN_SAVE_CCL);n.appendChild(r),n.appendChild(i),n.appendChild(c),o.appendChild(s),o.appendChild(n),document.body.appendChild(o),this.options.consent.showCategory&&this.renderCategoryTable(this.options.consent.showCategoryTable)}presenterController(e){if(e.current){if(this.log("Cookie was found:",e),this.state.cookie=e.current,e.current.categories){const t=[...e.current.categories];this.state.preferences.accepted=t,this.state.preferences.declined=this.options.consent.categories.filter((e=>!t.includes(e))),this.adjustCategoryToggle()}e.isExpiredRevision&&(this.state.revisionExpired=!0,this.banner.show(this.options.meta.delay),this.options.onExpired&&"function"==typeof this.options.onExpired&&this.options.onExpired("revision",this.state)),e.isExpiredDate&&(this.banner.show(this.options.meta.delay),this.options.onExpired&&"function"==typeof this.options.onExpired&&this.options.onExpired("date",this.state))}else this.log("Cookie not found"),this.banner.show(this.options.meta.delay),this.state.preferences.accepted=this.options.consent.categories,this.adjustCategoryToggle();if(this.options.onInit&&"function"==typeof this.options.onInit&&this.options.onInit(this.state,this.consent),this.options.locales){this.state.languages=[];for(const e in this.options.locales)this.state.languages.push(e)}this.state.init&&this.state.language!==this.options.language&&(this.state=(0,n.default)(c.DEFAULT_STATE),this.changeLanguage(this.options.language))}presenter(){const e=this.cookies.getData();this.state.environment="production",this.state.preferences.timestamp=(0,a.getTimestamp)(),this.state.preferences.event=l.preferenceEventKeys.init,this.state.init=!0,this.banner.init(),this.dialog.init(),this.presenterController(e),this.initButtonDomEvents(),this.browseSiteScripts()}init(){const e=(0,a.isClientBot)();return!(this.options.meta.hideFromBots&&e)&&(()=>{const e={getState:this._getState.bind(this),getPreferences:this._getPreferences.bind(this),getOptions:this._getOptions.bind(this),getNodes:this._getNodes.bind(this),getSelectors:this._getSelectors.bind(this),init:this.init.bind(this),initButtonDomEvents:this.initButtonDomEvents.bind(this),removeButtonDomEvents:this.removeButtonDomEvents.bind(this),initToggleDomEvents:this.initToggleDomEvents.bind(this),removeToggleDomEvents:this.removeToggleDomEvents.bind(this),changeLanguage:this.changeLanguage.bind(this),changeLocales:this.setLocalesContent.bind(this),showBanner:this.banner.show.bind(this),hideBanner:this.banner.hide.bind(this),destroyBanner:this.banner.destroy.bind(this),showDialog:this.dialog.show.bind(this),hideDialog:this.dialog.hide.bind(this),destroyDialog:this.dialog.destroy.bind(this),getCookie:this.cookies.get.bind(this),destroyCookie:this.cookies.destroy.bind(this),addConsentCookie:this.consent.addCookie.bind(this),removeConsentCookie:this.consent.removeCookie.bind(this)};return this.presenter(),this.historyPush("init"),this.log(`## '${this.scope}' loaded in 'window.CookieConsentLayer'`,e),window.CookieConsentLayer=e,e})()}}},3375:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_OPTIONS=t.DEFAULT_STATE=t.DEFAULT_COOKIE_NAME=t.DEFAULT_META_NAME=void 0,t.DEFAULT_META_NAME="CookieConsentLayer",t.DEFAULT_COOKIE_NAME="CC_LAYER",t.DEFAULT_STATE={init:!1,environment:void 0,revisionExpired:!1,history:["pending"],banner:{render:!1,show:!1,destroyed:!1},dialog:{render:!1,show:!1,destroyed:!1},categories:{show:!1,table:!1,dirty:!1},scripts:{site:[]},language:"en-US",languages:["en-US"],cookie:null,preferences:{timestamp:null,event:null,accepted:[],declined:[],changed:[]}},t.DEFAULT_OPTIONS={meta:{name:t.DEFAULT_COOKIE_NAME,revision:0,debug:!1,delay:0,classPrefix:"ccl-",hideFromBots:!1,ltr:!0},cookie:{name:t.DEFAULT_COOKIE_NAME,domain:".your-domain.some",expiration:365,path:"/",sameSite:"Lax",rfc:!1},scripts:{autoload:!1,mode:"opt-in"},consent:{force:!1,categories:["necessary","analytics","marketing","functional","personalization"],necessaryCategories:["necessary"],staticCategories:[],showCategory:!0,showCategoryTable:!0,autoClearCookies:!1,cookies:{necessary:[{name:"CookieConsentScope1",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1},{name:"CookieConsentScope2",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1}],analytics:[{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1},{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1}],marketing:[{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1},{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1}],functional:[{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1},{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1}],personalization:[{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1},{name:"CookieConsentScope",domain:".your-domain.some",expiration:365,description:"Cookie description",regex:!1}]}},banner:{id:"CookieConsentLayerBanner",btnAcceptAllId:"CookieConsentLayerBannerBtnAcceptAll",btnAcceptNecessaryId:"CookieConsentLayerBannerBtnAcceptNecessary",layout:"cloud",position:"bottom center",transition:"default"},dialog:{id:"CookieConsentLayerDialog",btnAcceptAllId:"CookieConsentLayerDialogBtnAcceptAll",btnAcceptNecessaryId:"CookieConsentLayerDialogBtnAcceptNecessary",btnSaveId:"CookieConsentLayerDialogBtnSave",layout:"box",position:"middle",transition:"default"},language:"en-US",locales:{"en-US":{common:{buttonAcceptAll:"Accept all",buttonAcceptNecessary:"Accept necessary",buttonSave:"Save settings",buttonClose:"Close"},banner:{title:"We use cookies!",content:'Hi, this website uses essential cookies to ensure its proper operation and tracking cookies to understand how you interact with it. The latter will be set only after consent. <button type="button" data-ccl="show_dialog">Let me choose</button>'},dialog:{title:"Cookie preferences",primary:'I use cookies to ensure the basic functionalities of the website and to enhance your online experience. You can choose for each category to opt-in/out whenever you want. For more details relative to cookies and other sensitive data, please read the full <a href="#">privacy policy</a>.',secondary:'This is secondary content block ... for some reasons ... with <a href="#" target="_blank">outer link</a> or <button type="button" data-ccl="hide_dialog">close dialog</button>'},revisionAlert:"Sorry, but we changed our policy or whatever, so you must accept cookies again.",table:{colName:"Name",colDomain:"Domain",colExpiration:"Expiration",colDescription:"Description"},categories:{necessary:{title:"Strictly necessary cookies",description:"These cookies are essential for the proper functioning of my website. Without these cookies, the website would not work properly"},analytics:{title:"Analytics and performance cookies",description:"These cookies allow the website to remember the choices you have made in the past"},marketing:{title:"Marketing and advertisement cookies",description:"These cookies collect information about how you use the website, which pages you visited and which links you clicked on. All of the data is anonymized and cannot be used to identify you"},functional:{title:"Functional cookies",description:"Functional and not specified cookies"},personalization:{title:"Personalization cookies",description:"Personalization and not specified cookies"}}},"cs-CZ":{common:{buttonAcceptAll:"Přimout vše",buttonAcceptNecessary:"Přimout nezbytné",buttonSave:"Uložit změny",buttonClose:"Zavřít"},banner:{title:"My používáme cookies!",content:'Hi, this website uses essential cookies to ensure its proper operation and tracking cookies to understand how you interact with it. The latter will be set only after consent. <button type="button" data-ccl="show_dialog">Let me choose</button>'},dialog:{title:"Preference koláčků",primary:'I use cookies to ensure the basic functionalities of the website and to enhance your online experience. You can choose for each category to opt-in/out whenever you want. For more details relative to cookies and other sensitive data, please read the full <a href="#">privacy policy</a>.',secondary:'This is secondary content block ... for some reasons ... with <a href="#" target="_blank">outer link</a> or <button type="button" data-ccl="hide_dialog">close dialog</button>'},revisionAlert:"Omlouváme se, ale došlo ke změně v našich pravidlech cookies a proto to musíte potvrdit znovu.",table:{colName:"Název",colDomain:"Doména",colExpiration:"Expirace",colDescription:"Poznámka"},categories:{necessary:{title:"Nezbytné cookies pro provoz",description:"These cookies are essential for the proper functioning of my website. Without these cookies, the website would not work properly"},analytics:{title:"Analytické cookies",description:"These cookies allow the website to remember the choices you have made in the past"},marketing:{title:"Marketingové cookies",description:"These cookies collect information about how you use the website, which pages you visited and which links you clicked on. All of the data is anonymized and cannot be used to identify you"},functional:{title:"Functional cookies",description:"Functional and not specified cookies"},personalization:{title:"Personalization cookies",description:"Personalization and not specified cookies"}}}},onAcceptAll:function(e,t){},onAcceptNecessary:function(e,t){},onChange:function(e,t){},onInit:function(e){},onToggle:function(e){},onExpired:function(e,t){},onError:function(e,t,o){}}},9834:(e,t)=>{"use strict";var o,s,n,r;Object.defineProperty(t,"__esModule",{value:!0}),t.defaultCategoryKeys=t.scriptsModeKeys=t.preferenceStateEventKeys=t.environmentTypeKeys=t.preferenceEventKeys=void 0,(t.preferenceEventKeys||(t.preferenceEventKeys={})).init="init",(r=t.environmentTypeKeys||(t.environmentTypeKeys={})).development="development",r.production="production",(n=t.preferenceStateEventKeys||(t.preferenceStateEventKeys={})).all="all",n.necessary="necessary",n.custom="custom",(s=t.scriptsModeKeys||(t.scriptsModeKeys={}))["opt-in"]="opt-in",s["opt-out"]="opt-out",(o=t.defaultCategoryKeys||(t.defaultCategoryKeys={})).necessary="necessary",o.analytics="analytics",o.marketing="marketing",o.functional="functional",o.personalization="personalization"},8095:function(e,t,o){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,o,s){void 0===s&&(s=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,s,n)}:function(e,t,o,s){void 0===s&&(s=o),e[s]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||s(t,e,o)},r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.CookieConsentLayer=void 0;var i=o(9776);Object.defineProperty(t,"CookieConsentLayer",{enumerable:!0,get:function(){return r(i).default}}),n(o(9834),t),n(o(9217),t)},9217:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3337:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createButtonElement=t.createElement=t.setCookie=t.getCookie=t.isClientBot=t.getToken=t.getTimestamp=void 0,t.getTimestamp=()=>Math.round((new Date).getTime()/1e3),t.getToken=(e=12)=>Math.random().toString(36).replace(/[^a-z]+/g,"").substr(0,e),t.isClientBot=()=>{let e=!1;const t=new RegExp("(googlebot/|bot|Googlebot-Mobile|Googlebot-Image|Google favicon|Mediapartners-Google|bingbot|slurp|java|wget|curl|Commons-HttpClient|Python-urllib|libwww|httpunit|nutch|phpcrawl|msnbot|jyxobot|FAST-WebCrawler|FAST Enterprise Crawler|biglotron|teoma|convera|seekbot|gigablast|exabot|ngbot|ia_archiver|GingerCrawler|webmon |httrack|webcrawler|grub.org|UsineNouvelleCrawler|antibot|netresearchserver|speedy|fluffy|bibnum.bnf|findlink|msrbot|panscient|yacybot|AISearchBot|IOI|ips-agent|tagoobot|MJ12bot|dotbot|woriobot|yanga|buzzbot|mlbot|yandexbot|purebot|Linguee Bot|Voyager|CyberPatrol|voilabot|baiduspider|citeseerxbot|spbot|twengabot|postrank|turnitinbot|scribdbot|page2rss|sitebot|linkdex|Adidxbot|blekkobot|ezooms|dotbot|Mail.RU_Bot|discobot|heritrix|findthatfile|europarchive.org|NerdByNature.Bot|sistrix crawler|ahrefsbot|Aboundex|domaincrawler|wbsearchbot|summify|ccbot|edisterbot|seznambot|ec2linkfinder|gslfbot|aihitbot|intelium_bot|facebookexternalhit|yeti|RetrevoPageAnalyzer|lb-spider|sogou|lssbot|careerbot|wotbox|wocbot|ichiro|DuckDuckBot|lssrocketcrawler|drupact|webcompanycrawler|acoonbot|openindexspider|gnam gnam spider|web-archive-net.com.bot|backlinkcrawler|coccoc|integromedb|content crawler spider|toplistbot|seokicks-robot|it2media-domain-crawler|ip-web-crawler.com|siteexplorer.info|elisabot|proximic|changedetection|blexbot|arabot|WeSEE:Search|niki-bot|CrystalSemanticsBot|rogerbot|360Spider|psbot|InterfaxScanBot|Lipperhey SEO Service|CC Metadata Scaper|g00g1e.net|GrapeshotCrawler|urlappendbot|brainobot|fr-crawler|binlar|SimpleCrawler|Livelapbot|Twitterbot|cXensebot|smtbot|bnf.fr_bot|A6-Indexer|ADmantX|Facebot|Twitterbot|OrangeBot|memorybot|AdvBot|MegaIndex|SemanticScholarBot|ltx71|nerdybot|xovibot|BUbiNG|Qwantify|archive.org_bot|Applebot|TweetmemeBot|crawler4j|findxbot|SemrushBot|yoozBot|lipperhey|y!j-asr|Domain Re-Animator Bot|AddThis)","i"),o=navigator.userAgent;return t.test(o)&&(e=!0),e},t.getCookie=e=>{let t=e+"=",o=document.cookie.split(";");for(let e=0;e<o.length;e++){let s=o[e];for(;" "===s.charAt(0);)s=s.substring(1);if(0===s.indexOf(t))return s.substring(t.length,s.length)}return""},t.setCookie=(e,t,o=1)=>{const s=new Date;s.setTime(s.getTime()+24*o*60*60*1e3);let n="expires="+s.toUTCString();document.cookie=e+"="+t+";"+n+";path=/"},t.createElement=({tag:e="div",type:t,id:o,className:s,css:n,text:r,html:i,cclData:a,cclTarget:c,cclToggle:l,arias:d,on:p})=>{const h=document.createElement(e);return t&&(h.type=t),o&&(h.id=o),s&&(h.className=s),n&&(h.style.cssText=n),r&&(h.innerText=r),i&&(h.innerHTML=i),a&&(h.dataset.ccl=a),c&&(h.dataset["ccl-target"]=c),l&&(h.dataset["ccl-toggle"]=l),d&&(d.label&&(h.ariaLabel=d.label),d.labeledBy&&(h.ariaLabelledBy=d.labeledBy),d.modal&&(h.ariaModal=d.modal),d.hidden&&(h.ariaHidden=String(d.hidden)),d.describedBy&&(h.ariaDescribedBy=d.describedBy)),p&&(p.click&&(h.onclick=p.click),p.hover&&(h.onmouseover=p.hover),p.focus&&(h.onfocus=p.focus),p.change&&(h.onchange=p.change),p.blur&&(h.onblur=p.blur),p.dblclick&&(h.ondblclick=p.dblclick)),h},t.createButtonElement=(e,o,s,n)=>(0,t.createElement)({id:e,className:o,text:s,cclData:n,tag:"button",type:"button",arias:{label:"button"}})},3303:function(e,t,o){"use strict";var s=this&&this.__createBinding||(Object.create?function(e,t,o,s){void 0===s&&(s=o);var n=Object.getOwnPropertyDescriptor(t,o);n&&!("get"in n?!t.__esModule:n.writable||n.configurable)||(n={enumerable:!0,get:function(){return t[o]}}),Object.defineProperty(e,s,n)}:function(e,t,o,s){void 0===s&&(s=o),e[s]=t[o]}),n=this&&this.__exportStar||function(e,t){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(t,o)||s(t,e,o)};Object.defineProperty(t,"__esModule",{value:!0}),n(o(8095),t),n(o(1799),t)},1799:(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=o(8095);window.initCookieConsentLayer=(e,t,o)=>new s.CookieConsentLayer(e,t,o)}},t={};function o(s){var n=t[s];if(void 0!==n)return n.exports;var r=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(r.exports,r,r.exports,o),r.loaded=!0,r.exports}o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),o(3303),o(5816)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,